
import XMonad
import XMonad.Config.Xfce
import XMonad.Hooks.DynamicLog
import qualified Data.Text.Lazy as B

-- This uses dbus-client from hackage:
-- <http://hackage.haskell.org/package/dbus-client>
import DBus.Client

main = do
    dbusClient <- newClient =<< getSessionBus
    getWellKnownName dbusClient
    xmonad $ xfceConfig
        { logHook = dynamicLogWithPP (myPrettyPrinter dbusClient) }

getWellKnownName :: Client -> IO ()
getWellKnownName dbusClient = runDBus dbusClient $ do
    requestName (mkBusName_ (B.pack "org.xmonad.Log"))
        [AllowReplacement, ReplaceExisting, DoNotQueue]
        (\e -> error "xmonad: Failed to acquire name org.xmonad.Log")
        (\response -> return ())

outputThroughDBus :: Client -> String -> IO ()
outputThroughDBus dbusClient str = runDBus dbusClient $ do
    let msg = Signal
                (mkObjectPath_ (B.pack "/org/xmonad/Log"))
                (mkMemberName_ (B.pack "Update"))
                (mkInterfaceName_ (B.pack "org.xmonad.Log"))
                Nothing
                [toVariant str]
    send_ msg

myPrettyPrinter :: Client -> PP
myPrettyPrinter dbus = defaultPP {
    ppOutput  = outputThroughDBus dbus
  , ppTitle   = shorten 100 . pangoSanitize
  , ppCurrent = pangoColor "#006666" . wrap "[" "]" . pangoSanitize
  , ppVisible = pangoColor "#663366" . wrap "(" ")" . pangoSanitize
  , ppHidden  = wrap " " " "
  , ppUrgent  = pangoColor "red"
  }

pangoColor :: String -> String -> String
pangoColor fg = wrap left right
 where
  left  = "<span foreground=\"" ++ fg ++ "\">"
  right = "</span>"

pangoSanitize :: String -> String
pangoSanitize = foldr sanitize ""
 where
  sanitize '>'  acc = "&gt;" ++ acc
  sanitize '<'  acc = "&lt;" ++ acc
  sanitize '\"' acc = "&quot;" ++ acc
  sanitize '&'  acc = "&amp;" ++ acc
  sanitize x    acc = x:acc

